import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Yoojin Jeong
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //initialize title and description
        String title = "";
        String description = "";

        // Check if title is empty
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() > 0) {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        } else {
            title = "No title available";
        }

        // Check if description is empty
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() > 0) {
            description = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        } else {
            description = "No description available";
        }

        //print out tags
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1>");
        out.println(
                "<a href=\""
                        + channel.child(getChildElement(channel, "link"))
                                .child(0).label()
                        + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        //print out border and titles of the table
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //close all starting tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        //set i as number of children of xml
        int i = xml.numberOfChildren();
        //set index as -1 for the case not found
        int index = -1;

        //find the first occurrence tag in xml
        while (i > 0 && index < 0) {
            i--;
            //change index if child equals to tag
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //message if date, source, and title don't exist
        String date = "No date available";
        String source = "No source available";
        String title = "No title available";

        //check for "date"
        //if there is no date, it will print out "No date available"
        int pubDateIndex = getChildElement(item, "pubDate");
        if (pubDateIndex != -1) {
            date = item.child(pubDateIndex).child(0).label();
        }

        //check for "source"
        //if there is no source, it will print out "No source available"
        int sourceIndex = getChildElement(item, "source");
        if (sourceIndex != -1) {
            if (item.child(sourceIndex).hasAttribute("url")) {
                source = "<a href = \""
                        + item.child(sourceIndex).attributeValue("url") + "\">"
                        + item.child(sourceIndex).child(0).label() + "</a>";
            }
        }

        //check occurrence of link, title, and description
        int linkIndex = getChildElement(item, "link");
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");

        //if title exists, check if there is a link
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            if (linkIndex != -1) {
                title = "<a href = \"" + item.child(linkIndex).child(0).label()
                        + "\">" + item.child(titleIndex).child(0).label()
                        + "</a>";
            } else {
                title = item.child(titleIndex).child(0).label();
            }

            //if there is no title, then check if there is description tag
            //if description exists, check if there is a link
        } else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0) {
            if (linkIndex != -1) {
                title = "<a href = \"" + item.child(linkIndex).child(0).label()
                        + "\">" + item.child(descriptionIndex).child(0).label()
                        + "</a>";
            } else {
                title = item.child(descriptionIndex).child(0).label();
            }
        }

        //print out date, source, and title in HTML format
        out.println("<tr>");
        out.println("<td>" + date + "</td>");
        out.println("<td>" + source + "</td>");
        out.println("<td>" + title + "</td>");
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        // create XMLTree from the url source
        XMLTree xml = new XMLTree1(url);

        // create the structure
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + xml.attributeValue("title") + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h2>" + xml.attributeValue("title") + "</h2>");
        //unordered list
        out.println("<ul>");

        // repeatedly create feeds based on the given RSS links
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            // create feed RSS file from the feed source
            XMLTree feed = xml.child(i);
            XMLTree rss = new XMLTree1(feed.attributeValue("url"));

            // check whether root tag is "rss" and if it has attribute "version"
            // check whether the version is 2.0
            if ((rss.label().equals("rss")) && (rss.hasAttribute("version"))
                    && (rss.attributeValue("version").equals("2.0"))) {
                // create a <li> list for the feeds
                out.println("<li> <a href=\"" + feed.attributeValue("file")
                        + "\">" + feed.attributeValue("name") + "</a> </li>");

                // Create separate feed HTML file for the each web-page link
                String feedName = feed.attributeValue("file");
                SimpleWriter feedOut = new SimpleWriter1L(feedName);

                // assign channel as new XMLTree in the feed file
                XMLTree channel = rss.child(0);

                // create output header for one feed in the feed file
                outputHeader(channel, feedOut);

                // create table for each items in the feed file
                int count = 0;
                while (count < channel.numberOfChildren()) {
                    if (channel.child(count).label().equals("item")) {
                        processItem(channel.child(count), feedOut);
                    }
                    count++;
                }

                // create footer for feed in the feed file
                outputFooter(feedOut);
                feedOut.close();

                //if feed is not valid RSS, print out a message
            } else {
                out.println("<li>Invalid RSS</li>");
            }
        }
        // close the <ul> list
        out.println("</ul>");
        // close the <body> list
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // ask user to type in URL source.
        out.println("Please type in the URL for the URL of XML: ");
        String url = in.nextLine();

        // ask user to type in the name of HTML file
        out.println("Please type in the file name you will create: ");
        String fileName = in.nextLine();

        // set "outputFile" as a new SimpleWriter object
        SimpleWriter outputFile = new SimpleWriter1L(fileName);

        // create the feeds in the HTML file
        processFeed(url, fileName, outputFile);

        in.close();
        out.close();
        outputFile.close();
    }

}
